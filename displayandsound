#!/usr/bin/env pybricks-micropython
# Display sensor values (e.g., distance, color) on the EV3 screen. Make the robot play a custom beep sequence when it completes a task
from pybricks.hubs import EV3Brick
from pybricks.ev3devices import UltrasonicSensor, ColorSensor, Motor
from pybricks.parameters import Port
from pybricks.tools import wait
from pybricks.robotics import DriveBase
# Initialize the EV3 Brick
ev3 = EV3Brick()
turn_rate = 0
speed = 100
left_motor = Motor(Port.B)
right_motor = Motor(Port.C)
robot = DriveBase(left_motor, right_motor, wheel_diameter=55.5, axle_track=104)
# Initialize the sensors
obstacle_sensor = UltrasonicSensor(Port.S3)  # Ultrasonic Sensor on Port 4
color_sensor = ColorSensor(Port.S4)    # Color Sensor on Port 1
# Get the sensor values
distance = obstacle_sensor.distance()  # Distance in millimeters
color = color_sensor.color()      # Detected color (numeric code)
# Play a custom beep sequence when the task is completed
def play_custom_beep_sequence():
    ev3.speaker.beep(440, 500)  # Beep at 440 Hz for 500 ms
    wait(100)              # Wait 100 ms between beeps
    ev3.speaker.beep(660, 500)  # Beep at 660 Hz for 500 ms
    wait(100)
    ev3.speaker.beep(880, 500)  # Beep at 880 Hz for 500 ms

robot.drive(speed, turn_rate)

while True:
    # Get the sensor values
    distance = obstacle_sensor.distance()  # Distance in millimeters
    color = color_sensor.color()      # Detected color (numeric code)
    # Display the values on the EV3 Brick screen
    ev3.screen.clear()
    ev3.screen.draw_text(10, 10, "Distance: {} mm".format(distance))
    ev3.screen.draw_text(10, 30, "Color: {}".format(color))
    # Call the beep sequence function when the task is complete
    #Right now it plays the 
    # beep sequence when the distance is under 100mm
    if distance < 100:
        play_custom_beep_sequence()
    # Wait before updating the values (500ms)
    wait(500)
